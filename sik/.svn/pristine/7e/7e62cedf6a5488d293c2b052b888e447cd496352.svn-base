package kr.or.ddit.academic;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.academic.service.AcademicService;
import kr.or.ddit.vo.AcaColleageVO;
import kr.or.ddit.vo.AcaDeptVO;
import kr.or.ddit.vo.AcademicVO;
import kr.or.ddit.vo.UserVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/academic")
@PreAuthorize("isAuthenticated()")
public class academicController {
	
	@Autowired
	AcademicService academicService;
	
	/**
	 * (학생)학적변동 신청 목록 출력
	 * @param session
	 * @param model
	 * @return
	 */
	//요청URI : /academic/acaListStu
	@GetMapping("/acaListStu")
	public String acaListStu(HttpSession session, Model model) {
		//학생 정보 조회
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum = userVO.getUsername();
		log.info("acaListStu의 stuNum : " + stuNum);
		
		Map<String, Object> stuInfoMap = this.academicService.getStuInfo(stuNum);
		log.info("leaveReturnStu의 stuInfoMap : " + stuInfoMap);
		
		//학적변동 신청 목록 출력
		List<Map<String, Object>> acChgList = this.academicService.getAcChgList(stuNum);
		log.info("acaChgList : " + acChgList);
		
		//복수전공/부전공 신청 목록 출력
		List<Map<String, Object>> acDMList = this.academicService.getDMList(stuNum);
		log.info("acDMList : " + acDMList);
		
		//전과 신청 목록 출력
		List<Map<String, Object>> acTranList = this.academicService.getTranList(stuNum);
		log.info("acTranList : " + acTranList);
		
		model.addAttribute("stuInfo", stuInfoMap);
		model.addAttribute("acChgList", acChgList);
		model.addAttribute("acDMList", acDMList);
		model.addAttribute("acTranList", acTranList);
		
		return "academic/acaList_stu";
	}
	
	
	//요청URI : /academic/acaListAdm
	@GetMapping("/acaListAdm")
	public String acaListAdm(Model model) {
		return "academic/acaList_adm";
	}
	
	/**
	 * 휴학/복학 신청화면 출력
	 * @param session
	 * @param model
	 * @return
	 */
	//요청URI : /academic/leaveReturnStu
	@GetMapping("/leaveReturnStu")
	public String leaveReturnStu(HttpSession session,
								 Model model) {
		
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum = userVO.getUsername();
		log.info("leaveReturnStu의 stuNum : " + stuNum);
		
		Map<String, Object> stuInfoMap = this.academicService.getStuInfo(stuNum);
		log.info("leaveReturnStu의 stuInfoMap : " + stuInfoMap);		
		
		
		List<AcademicVO> LHVOList = this.academicService.getLeaveHistory(stuNum);
		log.info("leaveReturnStu의 LHVOList : " + LHVOList);
		if(LHVOList != null) {
			model.addAttribute("LHVOList", LHVOList);
		}
		model.addAttribute("stuInfo", stuInfoMap);
		
		return "academic/leaveReturn_stu";
	}
	
	/**
	 * 휴학신청
	 * @param session
	 * @param academicVO
	 * @return
	 */
	@ResponseBody
	@PostMapping("/leaveStu")
	public Map<String,Object> leaveStu(HttpSession session 
					 , @RequestBody AcademicVO academicVO) {
		log.info("leaveStu의 academicVO : " + academicVO);
		
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum =userVO.getUsername();
		log.info("leaveStu의 stuNum : " + stuNum);
		academicVO.setStuNum(stuNum);
		log.info("leavetStu의 academicVO2 : " + academicVO);
		
		//학생 학적상태 조회
		int num = this.academicService.getStuStatus(stuNum);
		if(num != 0) {
			Map<String, Object> stMap = new HashMap<String, Object>();
			stMap.put("stResult", -2);
			return stMap;
		}
		
		Map<String, Object> cntMap = new HashMap<String, Object>();
		//stuNum, acList
		cntMap.put("stuNum", stuNum);
		cntMap.put("acList", academicVO.getAcList());
		log.info("leaveStu의 cntMap : " + cntMap);
		int resultCnt = this.academicService.getAcCnt(cntMap);
		log.info("leaveStu의 resultCnt : " + resultCnt);
		Map<String,Object> map = new HashMap<>();
		int result = 0;
		
		if(resultCnt > 0) {
			log.info("여기걸림1");
			result = -1;
			log.info("여기걸림1 다음 result : " + result);
		}else {
			result = this.academicService.appLeave(academicVO);
			log.info("leaveStu의 result : " + result);
			
		}
		
		map.put("result", result);
		return map;
	}
	
	/**
	 * 학적상태 조회
	 * @param session
	 * @return
	 */
	@ResponseBody
	@PostMapping("/searchLeave")
	public int searchLeave(HttpSession session) {
		
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum = userVO.getUsername();
		
		log.info("searchLeave의 stuNum : " + stuNum);
		int num = this.academicService.getStuStatus(stuNum);
		int result = 0;
		
		log.info("searchLeave의 result : " + result);
		if(num == 1) {
			result = 1;
		}else {
			result = -1;
		}
		
		log.info("searchLeave의 result : " + result);
		return result;
	}
	
	/**
	 * (학생)복학 신청
	 * @param session
	 * @param acSdt
	 * @return
	 */
	@ResponseBody
	@PostMapping("/appReturn")
	public int appReturn(HttpSession session, @RequestBody Map<String, Object> dataMap) {
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum = userVO.getUsername();
		log.info("appReturn의 stuNum : " + stuNum);
		
		String acSdt = (String) dataMap.get("acSdt");
		log.info("appReturn의 acSdt : " + acSdt);
		
		Map<String, Object> cntMap = new HashMap<String, Object>();
		cntMap.put("stuNum", stuNum);
		cntMap.put("acList", 0);
		log.info("leaveStu의 cntMap : " + cntMap);
		int resultCnt = this.academicService.getAcCnt(cntMap);
		log.info("appReturn의 resultCnt : " + resultCnt);
		
		if(resultCnt > 0) {
			return -1;
		}
		
		Map<String, Object> reMap = new HashMap<String, Object>();
		reMap.put("stuNum", stuNum);
		reMap.put("acSdt", acSdt);
		log.info("appReturn의 reMap : " + reMap);
		
		int result = this.academicService.appReturn(reMap);
		log.info("appreturn의 result : " + result);
		
		return result;
	}
	
	/**
	 * (학생)복수전공/부전공 신청화면 출력
	 * @param session
	 * @param model
	 * @return
	 */
	//요청URI : /academic/acaDMStu
	@GetMapping("/acaDMStu")
	public String acaDMStu(HttpSession session, Model model,
			@RequestParam(value="collNum",required=false,defaultValue="2") String collNum) {

		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum = userVO.getUsername();
		log.info("leaveReturnStu의 stuNum : " + stuNum);
		
		Map<String, Object> stuInfoMap = this.academicService.getStuInfo(stuNum);
		log.info("leaveReturnStu의 stuInfoMap : " + stuInfoMap);	
		
	
		List<AcaDeptVO> collNDeptList = this.academicService.getCollNDeptList();
		log.info("acaDMStu의 collNDeptList : " + collNDeptList);
		
		List<Map<String, Object>> cndMapList = this.academicService.getCnDList(collNum);
		log.info("acaDMStu의 cndMapList : " + cndMapList);
		
		model.addAttribute("cndMapList", cndMapList);
		model.addAttribute("CNDList", collNDeptList);
		model.addAttribute("stuInfo", stuInfoMap);
		return "academic/acaDM_stu";
	}
	
	/**
	 * 단과대학 내 학과목록 조회
	 * @param acaColleageVO
	 * @return
	 */
	@ResponseBody
	@PostMapping("/getDeptList")
	public List<AcaDeptVO> getDeptList(@RequestBody AcaColleageVO acaColleageVO){
		log.info("getDeptList의 acaColleageVO : " + acaColleageVO);
		String collNm = acaColleageVO.getCollNm();
		List<AcaDeptVO> deptList = this.academicService.getDeptList(collNm);
		log.info("getDeptList의 deptList : " + deptList);
		
		return deptList;
	}
	
	/**
	 * 복수전공/부전공 신청
	 * @param session
	 * @param dataMap
	 * @return
	 */
	@ResponseBody
	@PostMapping("/appDM")
	public Map<String, Object> appDM(HttpSession session
									, @RequestBody Map<String, Object> dataMap){
//		log.info("appDM에 왔음");
		log.info("appDM의 dataMap : " + dataMap);
		int deptNo = Integer.parseInt(String.valueOf(dataMap.get("deptNo")))  ;
		int dmDivision = Integer.parseInt(String.valueOf(dataMap.get("dmDivision")));
//		log.info("appDM의 deptNo : " + deptNo);
//		log.info("appDM의 dmDivision : " + dmDivision);
		
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum = userVO.getUsername();
		log.info("appDM의 stuNum : " + stuNum);
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		Map<String, Object> qualMap = this.academicService.getStuQual(stuNum);
		log.info("appDM의 qualMap : " + qualMap);
		
		//이수학기 조회
		int semester = Integer.parseInt(String.valueOf(qualMap.get("STU_SEMESTER")));
		double ar = Double.parseDouble(String.valueOf(qualMap.get("AR")));
		int sumMajor = Integer.parseInt(String.valueOf(qualMap.get("SUM_MAJOR")));
		
		if(dmDivision == 0 && (semester < 2 || ar < 3 || sumMajor < 20)) {	//복수전공 조건 불충족
			resultMap.put("result", "Dfail");
			resultMap.put("semester", semester);
			resultMap.put("ar", ar);
			resultMap.put("sumMajor", sumMajor);
			
			log.info("복수전공 조건 불충족 시 resultMap : " + resultMap);
			
 			return resultMap;
		}
		
		if(dmDivision == 1 && (semester < 2 || ar < 2)) {	//부전공 조건 불충족
			resultMap.put("result", "Mfail");
			resultMap.put("semester", semester);
			resultMap.put("ar", ar);
			
			log.info("부전공 조건 불충족 시 resultMap : " + resultMap);
			
			return resultMap;
		}
		
		//승인 대기 중인 복수전공/부전공 신청 내역 조회
		//승인 대기 중인 복수전공 신청 건수 조회)
		int cDmDivision = 0; 
		int cDmCheck = 0;
		
		Map<String, Object> checkMap = new HashMap<String, Object>();
		checkMap.put("stuNum", stuNum);
		checkMap.put("dmCheck", cDmCheck);
		checkMap.put("dmDivision", cDmDivision);
		log.info("appDM의 checkMap1 : " + checkMap);
		
		int DcheckResult = this.academicService.getDMHistory(checkMap);
		
		log.info("DcheckResult : " + DcheckResult);
		
		if(DcheckResult > 0) {	//승인대기 중인 복수전공 신청 내역 존재
			resultMap.put("result", "de");
			
			log.info("result de에 걸림");
			return resultMap;
		}
		
		
		//승인 대기 중인 부전공 신청 건수 조회)
		cDmDivision = 1;
		cDmCheck = 0;
		
		checkMap.put("dmCheck", cDmCheck);
		checkMap.put("dmDivision", cDmDivision);
		log.info("appDM의 checkMap2 : " + checkMap);
		
		int McheckResult = this.academicService.getDMHistory(checkMap);
		
		log.info("McheckResult : " + McheckResult);
		
		if(McheckResult > 0) {	//승인대기 중인 부전공 신청 내역 존재
			resultMap.put("result", "me");
			
			log.info("result me에 걸림");
			return resultMap;
		}
		
		
		//승인 완료된 복수전공/부전공 신청 내역 조회
		//승인 완료된 복수전공 신청 건수 조회)
		cDmDivision = 0; 
		cDmCheck = 1;
		
		checkMap.put("stuNum", stuNum);
		checkMap.put("dmCheck", cDmCheck);
		checkMap.put("dmDivision", cDmDivision);
		log.info("appDM의 checkMap1 : " + checkMap);
		
		int DcheckResultOK = this.academicService.getDMHistory(checkMap);
		
		log.info("DcheckResultOK : " + DcheckResultOK);
		
		if(DcheckResultOK > 0) {	//승인완료된 복수전공 신청 내역 존재
			resultMap.put("result", "deOK");
			return resultMap;
		}
		
		//승인 완료된 부전공 신청 건수 조회)
		cDmDivision = 1; 
		cDmCheck = 1;
		
		checkMap.put("stuNum", stuNum);
		checkMap.put("dmCheck", cDmCheck);
		checkMap.put("dmDivision", cDmDivision);
		log.info("appDM의 checkMap1 : " + checkMap);
		
		int McheckResultOK = this.academicService.getDMHistory(checkMap);
		
		log.info("McheckResultOK : " + McheckResultOK);
		
		if(McheckResultOK > 0) {	//승인완료된 복수전공 신청 내역 존재
			resultMap.put("result", "meOK");
			return resultMap;
		}
		
		
		Map<String, Object> dmMap = new HashMap<String, Object>();
		dmMap.put("stuNum", stuNum);
		dmMap.put("deptNo", deptNo);
		dmMap.put("dmDivision", dmDivision);
		
		int checkResult = this.academicService.appDM(dmMap);
		log.info("appDM의 checkResult : " + checkResult);
		if(checkResult == 1) {
			resultMap.put("result", checkResult);
			
			return resultMap;
		}else {
			resultMap.put("result", "fail");
			
			return resultMap;
		}
		
		//return  resultMap;
	}
	
	/**
	 * 전과 신청화면 출력
	 * @param session
	 * @param model
	 * @return
	 */
	//요청URI : /academic/acaTRStu
	@GetMapping("/acaTRStu")
	public String acaTRStu(HttpSession session, Model model
						 , @RequestParam(value="collNum",required=false,defaultValue="2") String collNum) {
		
		//학생정보 조회
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum = userVO.getUsername();
		log.info("leaveReturnStu의 stuNum : " + stuNum);
		
		Map<String, Object> stuInfoMap = this.academicService.getStuInfo(stuNum);
		log.info("leaveReturnStu의 stuInfoMap : " + stuInfoMap);
		
		List<AcaDeptVO> collNDeptList = this.academicService.getCollNDeptList();
		log.info("acaDMStu의 collNDeptList : " + collNDeptList);
		
		List<Map<String, Object>> cndMapList = this.academicService.getCnDList(collNum);
		log.info("acaDMStu의 cndMapList : " + cndMapList);
		
		model.addAttribute("cndMapList", cndMapList);
		model.addAttribute("CNDList", collNDeptList);
		model.addAttribute("stuInfo", stuInfoMap);
		
		return "academic/acaTR_stu";
	}
	
	/**
	 * (학생)전과신청
	 * @param appMap
	 * @return
	 */
	@ResponseBody
	@PostMapping("/appTR")
	public Map<String, Object> appTR(@RequestBody Map<String, Object> appMap){
		log.info("appTR의 appMap : " + appMap);
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		int tranDeptNum = Integer.parseInt(String.valueOf(appMap.get("tranDeptNum")));
		int preDeptNum = Integer.parseInt(String.valueOf(appMap.get("preDeptNum")));
		int stuNum = Integer.parseInt(String.valueOf(appMap.get("stuNum")));
		
		log.info("appTR의 tranDeptNum : " + tranDeptNum);
		log.info("appTR의 preDeptNum : " + preDeptNum);
		log.info("appTR의 stuNum : " + stuNum);
		
		Map<String, Object> rqhMap = new HashMap<String, Object>();
		int tdCheck = 0;	// 승인대기 상태
		rqhMap.put("tdCheck", tdCheck);
		rqhMap.put("stuNum", stuNum);
		int trcResult = this.academicService.getTRHistory(rqhMap);
		log.info("appTR의 trcResult : " + trcResult);
		
		if(trcResult > 0) {	//승인대기 상태인 전과신청 내역이 존재하는 경우
			resultMap.put("result", "wait");
			return resultMap;
		}
		
		tdCheck = 1;
		rqhMap.put("tdCheck", tdCheck);
		trcResult = this.academicService.getTRHistory(rqhMap);
		log.info("tdCheck가 1일 때의 trcResult : " + trcResult);
		if(trcResult > 0) {	//승인완료된 전과신청 내역이 존재하는 경우
			resultMap.put("result", "exist");
			return resultMap;
		}
	
		
		
		
		//전과 신청 조건 조회
		Map<String, Object> conMap = this.academicService.getTRCon(tranDeptNum);
		log.info("appTR의 conMap : " + conMap);
		
		int deptNumber = Integer.parseInt(String.valueOf(conMap.get("DEPT_NUMBER")));
		log.info("deptNumber : " + deptNumber);
		int cntAL = Integer.parseInt(String.valueOf(conMap.get("CNT_AL")));
		log.info("cntAL : " + cntAL);
		
		
		Map<String, Object> trMap = new HashMap<String, Object>();
		trMap.put("tranDeptNum", tranDeptNum);
		trMap.put("preDeptNum", preDeptNum);
		trMap.put("stuNum", stuNum);
		
		if(deptNumber <= cntAL) {	//학과정원 <= 해당 학과의 재학생 수 + 휴학생 수  : 전과신청이 불가한 경우
			resultMap.put("result", "over");
			log.info("resultMap : " + resultMap);
			
			return resultMap;
		}else {		//전과신청이 가능한 경우
			
			 int result  = this.academicService.appTR(trMap);
			 log.info("전과 insert result : " + result);
			 
			 if(result > 0) {
				 resultMap.put("result", "success");
				 
				 return resultMap;
			 }else {
				 resultMap.put("result", "error");
				 
				 return resultMap; 
			 }
			
		}
		
	}
	
	/**
	 * 추가 등록금 계산
	 * @param feeMap
	 * @return
	 */
	@ResponseBody
	@PostMapping("/addFee")
	public Map<String, Object> addFee(@RequestBody Map<String, Object> feeMap){
		//Map<String, Object> resultMap = new HashMap<String, Object>();
		
		Map<String, Object> addFeeMap = this.academicService.getAddFee(feeMap);
		log.info("addFee의 addFeeMap : " + addFeeMap);
		
		return addFeeMap;
		
	}
	
	
	
	/**
	 * (학생)자퇴 신청화면 출력
	 * @param model
	 * @return
	 */
	//요청URI : /academic/acaDropout
	@GetMapping("/acaDropout")
	public String acaDropout(HttpSession session, Model model) {
		
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum = userVO.getUsername();
		log.info("acaDropout의 stuNum : " + stuNum);
		
		Map<String, Object> stuInfoMap = this.academicService.getStuInfo(stuNum);
		log.info("acaDropout의 stuInfoMap : " + stuInfoMap);
		
		model.addAttribute("stuInfo", stuInfoMap);
		
		return "academic/acaDropout_stu";
	}
	
	/**
	 * (학생)자퇴 신청
	 * @param session
	 * @param academicVO
	 * @return
	 */
	@ResponseBody
	@PostMapping("/appDropout")
	public Map<String, Object> appDropout(HttpSession session, @RequestBody AcademicVO academicVO) {
		log.info("appDropout의 academicVO : " + academicVO);
		
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum = userVO.getUsername();
		String acSdt = academicVO.getAcSdt();
		String acReason = academicVO.getAcReason();
		
		int result = 0;
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		//학생 학적상태 조회
		int num = this.academicService.getStuStatus(stuNum);
		if(num != 0 && num != 1 && num != 5) {
			log.info("appDropout의  num : " + num);
//			result = -2;
			resultMap.put("result", -2);
			log.info("reusltMap(-2) : " + resultMap);
			
			return resultMap;
		}
		
		Map<String, Object> cntMap = new HashMap<String, Object>();
		//stuNum, acList
		cntMap.put("stuNum", stuNum);
		cntMap.put("acList", 2);
		log.info("appDropout의 cntMap : " + cntMap);
		int resultCnt = this.academicService.getAcCnt(cntMap);
		log.info("appDropout의 resultCnt : " + resultCnt);
		
		
		if(resultCnt > 0) {
			
			log.info("여기걸림1");
			result = -1;
			resultMap.put("result", -1);
			log.info("resultMap(-1) : " + resultMap);
			
			return resultMap;
			
		}else {
			
			Map<String, Object> dropMap = new HashMap<String, Object>();
			dropMap.put("stuNum", stuNum);
			dropMap.put("acSdt", acSdt);
			dropMap.put("acReason", acReason);
			
			log.info("appDropout의 dropMap : " + dropMap);
			
			
			result = this.academicService.appDropout(dropMap);
			
			resultMap.put("result", result);
			log.info("resultMap(마지막) : " + resultMap);
			log.info("appDropout의 result : " + result);
			
			log.info("appDropout의 마지막 result : " + result);
			
			return resultMap;
		}
			
		
	}
	
	
	/**
	 * 휴학신청 내역 조회
	 * @param session
	 * @return
	 */
	@ResponseBody
	@PostMapping("/getLeaveHistory")
	public List<AcademicVO> getLeaveHistory(HttpSession session){
		
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		int stuNum = userVO.getUsername();
		log.info("getLeaveHistory의 stuNum : " + stuNum);
		
		List<AcademicVO> academicVOList = this.academicService.getLeaveHistory(stuNum);
		
		return academicVOList;
	}
	
	
}








